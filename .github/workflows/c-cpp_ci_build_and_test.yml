name: C/C++ CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies - test-case 'build'
      run: |
        sudo apt-get update
        sudo apt-get install -y make g++ gcc
    - name: Check for Makefile - test-case 'build'
      run: |
        if [ ! -f src/Makefile ]; then
            echo "::error::Makefile not found, skipping build."
            false
            exit 42
        fi

    - name: Build by 'make'
      run: |
        make -C src
        if [ $? -ne 0 ]; then
          echo "::error::Failed to build the project via 'make'."
          false
          exit 42
        fi

    - name: Copy build 1
      run: |
        cp -r src/build src/build1
        if [ $? -ne 0 ]; then
          echo "::error::Failed to copy first build into 'build1' folder."
          false
          exit 42
        fi

    - name: Clean build 1
      run: |
        make -C src clean-build
        if test -d "src/build"; then
          echo "::error::Failed to clean the first build via 'make clean-build'."
          false
          exit 42
        fi

    - name: Build by 'make all'
      run: |
        make -C src all
        if [ $? -ne 0 ]; then
          echo "::error::Failed to build the project via 'make all'."
          false
          exit 42
        fi

    - name: Copy build 2
      run: |
        cp -r src/build src/build2
        if [ $? -ne 0 ]; then
          echo "::error::Failed to copy second build into 'build2' folder."
          false
          exit 42
        fi

    - name: Clean build 2
      run: |
        make -C src clean-build
        if test -d "src/build"; then
          echo "::error::Failed to clean the second build via 'make clean-build'."
          false
          exit 42
        fi

    - name: Compare build folders and files
      run: |
        diff -r src/build1 src/build2
        if [ $? -ne 0 ]; then
          echo "::error::The two builds aren't identical."
          false
          exit 42
        fi

    - name: Final cleanup
      run: |
        rm -rf src/build1 src/build2



  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies - test-case 'test'
      run: |
        sudo apt-get update
        sudo apt-get install -y make g++ gcc
    - name: Check for Makefile - test-case 'test'
      run: |
        if [ ! -f src/Makefile ]; then
            echo "::error::Makefile not found, skipping build."
            false
            exit 42
        fi

    - name: Test of Calm CatCalc Core
      run: |
        make -C src test | tee /dev/fd/2 | awk '
          BEGIN { error = 0 }
          /^[[:space:]]*[0-9]+ FAILED TESTS/ || /\([0-9]+ ms\)/ { next }
          /FAILED/ {
            print "::error::" $0;
            error = 1
          }
          END { if (error) false }'
        make -C src test

    - name: Clean build
      if: always()
      run: |
        make -C src clean-build
        if test -d "src/build"; then
          echo "::error::Failed to clean the build folder via 'make clean-build'"
          false
          exit 42
        fi


  generate_coverage:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies - test-case 'generate_coverage'
      run: |
        sudo apt-get update
        sudo apt-get install -y make g++ gcc lcov
    - name: Check for Makefile - test-case 'generate_coverage'
      run: |
        if [ ! -f src/Makefile ]; then
            echo "::error::Makefile not found, skipping build."
            false
            exit 42
        fi

    - name: Build by 'make test'
      run: |
        make -C src test || true
        if [ $? -ne 0 ]; then
          echo "::error::Failed to build GoogleTest library or unit tests via 'make test'."
          false
          exit 42
        fi

    - name: Re-build by 'make coverage
      run: |
        make -C src coverage
        if [ $? -ne 0 ]; then
          echo "::error::Failed to Re-build GoogleTest library or unit tests \
          with 'coverage flags' via 'make coverage'."
          false
          exit 42
        fi
  
    - name: Clean build 1
      run: |
        make -C src clean-build
        if test -d "src/build"; then
          echo "::error::Failed to clean the first build via 'make clean-build'."
          false
          exit 42
        fi

    - name: Directly build by 'make coverage'
      run: |
        make -C src coverage
        if [ $? -ne 0 ]; then
          echo "::error::Failed to Re-build GoogleTest library or unit tests \
          with 'coverage flags' via 'make coverage'."
          false
          exit 42
        fi


    - name: Clean build 2
      run: |
        make -C src clean-build
        if test -d "src/build"; then
          echo "::error::Failed to clean the first build via 'make clean-build'."
          false
          exit 42
        fi


  codecov:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies - test-case 'codecov'
      run: |
        sudo apt-get update
        sudo apt-get install -y make g++ gcc lcov
    - name: Check for Makefile - test-case 'codecov'
      run: |
        if [ ! -f src/Makefile ]; then
                echo "::error::Makefile not found, skipping build."
                false
                exit 42
        fi

    - name: Build by 'make coverage'
      run: |
        make -C src coverage
        if [ $? -ne 0 ]; then
          echo "::error::Failed to Re-build GoogleTest library or unit tests \
          with 'coverage flags' via 'make coverage'."
          false
          exit 42
        fi

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Honziksick/ivs-project-2-team-calculator


  documentation:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies - test-case 'documentation'
      run: |
        sudo apt-get update
        sudo apt-get install -y make doxygen graphviz
    - name: Check for Makefile - test-case 'documentation'
      run: |
        if [ ! -f src/Makefile ]; then
            echo "::error::Makefile not found, skipping build."
            false
            exit 42
        fi

    - name: Generate documentation
      run: |
        make -C src doc
        if [[ -s ./doc/doxygen_warnings.log ]]; then
            tail -n +4 ./doc/doxygen_warnings.log > ./doc/filtered_warnings.log
            if [[ -s ./doc/filtered_warnings.log ]]; then
              echo "::error::Doxygen generated warnings:"
              cat ./doc/filtered_warnings.log
              false
            fi
        else 
            echo "::error::Failed to generate documentation."
            false
        fi
          
    - name: Delete documentation
      run: make -C src clean-doc